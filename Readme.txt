FICHERO README MQTT_POSTGRES_GATEWAY

# MQTT to PostgreSQL Gateway

Este proyecto es un conector (gateway) que se suscribe a uno o m√°s topics MQTT, recibe mensajes en formato JSON, analiza autom√°ticamente su estructura, 
crea las tablas necesarias en PostgreSQL (con soporte para tipos como GEOMETRY, DATE y TIMESTAMP) y almacena los datos en la base de datos.

# Notas

- El c√≥digo desarrollado asume JSON planos o con objetos anidados
- Los mensajes deben ser JSON v√°lidos. Las listas dentro del JSON se ignoran por dise√±o.
- No da soporte para listas de objetos y arrays de arrays
- El conector no elimina ni modifica datos existentes.
- Cada topic MQTT crea su propia tabla PostgreSQL.
- Compatible con m√∫ltiples hilos para aumentar el rendimiento de escritura. 


## üß© Caracter√≠sticas principales

Suscripci√≥n MQTT desde m√∫ltiples topics	‚úÖ	Se lee desde config.ini, se suscribe din√°micamente
Compatibilidad con MQTT 3.1.1 y 5.0	‚úÖ	Soporte conmutado v√≠a par√°metro version
Lectura y an√°lisis de JSON din√°mico	‚úÖ	Se infiere tipo y estructura recursivamente
Creaci√≥n din√°mica de tablas	‚úÖ	Usa CREATE TABLE IF NOT EXISTS, con soporte GEOMETRY
Inserci√≥n autom√°tica de datos	‚úÖ	Incluye uso de ST_GeomFromText() para geometr√≠as
Manejo multihilo	‚úÖ	Configurable desde config.ini
Configuraci√≥n externa via config.ini	‚úÖ	MQTT, PostgreSQL, QoS, n√∫mero de hilos, logs
Logs con rotaci√≥n	‚úÖ	RotatingFileHandler incluido
Errores y reconexiones	‚ö†Ô∏è parcial	Rollback b√°sico incluido. Reconexi√≥n manual puede a√±adirse f√°cilmente si se desea
Compatibilidad con PostGIS	‚úÖ	GEOMETRY y ST_GeomFromText() integrados
Soporte para esquemas PostgreSQL personalizados  ‚úÖ  (`schema = sensores`, por ejemplo).

## ‚úÖ Requisitos del sistema

- Python 3.10 o superior
- PostgreSQL 13+ con extensi√≥n `postgis`
- Broker MQTT (Mosquitto, EMQX, RabbitMQ con plugin MQTT, etc.)
- SO compatible: Windows / Linux

---

## üì¶ Instalaci√≥n

1. Clona este repositorio o copia los archivos:
   ```bash
   git clone https://tu-repo/mqtt_postgres_gateway.git
   cd mqtt_postgres_gateway

2. Crea entorno virtiual si lo ejecutas desde tu local
```bash
    python -m venv venv
    venv\Scripts\activate   # en Windows
    # o
    source venv/bin/activate   # en Linux

3. Instala dependencias
    pip install -r requirements.txt

4. Crea la base de datos y el esquema en el postgre o MySQL

5. Edita el archivo config.ini para definir las conexiones

6. Con el entorno activado ejecuta
    python mqtt_postgres_gateway.py
